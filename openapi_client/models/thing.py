# coding: utf-8

"""
    API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.image_summary_schema import ImageSummarySchema
from openapi_client.models.tag_schema import TagSchema
from openapi_client.models.thing_education import ThingEducation
from openapi_client.models.thing_zip_data import ThingZipData
from openapi_client.models.user_summary_schema1 import UserSummarySchema1
from typing import Optional, Set
from typing_extensions import Self

class Thing(BaseModel):
    """
    Thing
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    thumbnail: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    public_url: Optional[StrictStr] = None
    creator: Optional[UserSummarySchema1] = None
    added: Optional[datetime] = None
    modified: Optional[datetime] = None
    is_published: Optional[Annotated[int, Field(le=1, strict=True, ge=0)]] = None
    is_wip: Optional[Annotated[int, Field(le=1, strict=True, ge=0)]] = None
    is_featured: Optional[StrictBool] = None
    is_nsfw: Optional[StrictBool] = None
    is_ai: Optional[StrictBool] = None
    like_count: Optional[StrictInt] = None
    is_liked: Optional[StrictBool] = None
    collect_count: Optional[StrictInt] = None
    is_collected: Optional[StrictBool] = None
    comment_count: Optional[StrictInt] = None
    is_watched: Optional[StrictBool] = None
    default_image: Optional[ImageSummarySchema] = None
    description: Optional[StrictStr] = None
    instructions: Optional[StrictStr] = None
    description_html: Optional[StrictStr] = None
    instructions_html: Optional[StrictStr] = None
    details: Optional[StrictStr] = None
    details_parts: Optional[List[Dict[str, Any]]] = None
    edu_details: Optional[StrictStr] = None
    edu_details_parts: Optional[List[Dict[str, Any]]] = None
    license: Optional[StrictStr] = None
    allows_derivatives: Optional[StrictBool] = None
    files_url: Optional[StrictStr] = None
    images_url: Optional[StrictStr] = None
    likes_url: Optional[StrictStr] = None
    ancestors_url: Optional[StrictStr] = None
    derivatives_url: Optional[StrictStr] = None
    tags_url: Optional[StrictStr] = None
    tags: Optional[List[TagSchema]] = None
    categories_url: Optional[StrictStr] = None
    file_count: Optional[StrictInt] = None
    is_purchased: Optional[Annotated[int, Field(le=1, strict=True, ge=0)]] = None
    app_id: Optional[StrictInt] = None
    download_count: Optional[StrictInt] = None
    view_count: Optional[StrictInt] = None
    education: Optional[ThingEducation] = None
    remix_count: Optional[StrictInt] = None
    make_count: Optional[StrictInt] = None
    app_count: Optional[StrictInt] = None
    root_comment_count: Optional[StrictInt] = None
    moderation: Optional[StrictStr] = None
    is_derivative: Optional[StrictBool] = None
    ancestors: Optional[List[StrictStr]] = None
    can_comment: Optional[StrictBool] = None
    type_name: Optional[StrictStr] = None
    is_banned: Optional[StrictBool] = None
    is_comments_disabled: Optional[StrictBool] = None
    needs_moderation: Optional[Annotated[int, Field(le=1, strict=True, ge=0)]] = None
    is_decoy: Optional[Annotated[int, Field(le=1, strict=True, ge=0)]] = None
    zip_data: Optional[ThingZipData] = None
    __properties: ClassVar[List[str]] = ["id", "name", "thumbnail", "url", "public_url", "creator", "added", "modified", "is_published", "is_wip", "is_featured", "is_nsfw", "is_ai", "like_count", "is_liked", "collect_count", "is_collected", "comment_count", "is_watched", "default_image", "description", "instructions", "description_html", "instructions_html", "details", "details_parts", "edu_details", "edu_details_parts", "license", "allows_derivatives", "files_url", "images_url", "likes_url", "ancestors_url", "derivatives_url", "tags_url", "tags", "categories_url", "file_count", "is_purchased", "app_id", "download_count", "view_count", "education", "remix_count", "make_count", "app_count", "root_comment_count", "moderation", "is_derivative", "ancestors", "can_comment", "type_name", "is_banned", "is_comments_disabled", "needs_moderation", "is_decoy", "zip_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Thing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_image
        if self.default_image:
            _dict['default_image'] = self.default_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of education
        if self.education:
            _dict['education'] = self.education.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zip_data
        if self.zip_data:
            _dict['zip_data'] = self.zip_data.to_dict()
        # set to None if creator (nullable) is None
        # and model_fields_set contains the field
        if self.creator is None and "creator" in self.model_fields_set:
            _dict['creator'] = None

        # set to None if is_nsfw (nullable) is None
        # and model_fields_set contains the field
        if self.is_nsfw is None and "is_nsfw" in self.model_fields_set:
            _dict['is_nsfw'] = None

        # set to None if is_ai (nullable) is None
        # and model_fields_set contains the field
        if self.is_ai is None and "is_ai" in self.model_fields_set:
            _dict['is_ai'] = None

        # set to None if default_image (nullable) is None
        # and model_fields_set contains the field
        if self.default_image is None and "default_image" in self.model_fields_set:
            _dict['default_image'] = None

        # set to None if edu_details_parts (nullable) is None
        # and model_fields_set contains the field
        if self.edu_details_parts is None and "edu_details_parts" in self.model_fields_set:
            _dict['edu_details_parts'] = None

        # set to None if app_id (nullable) is None
        # and model_fields_set contains the field
        if self.app_id is None and "app_id" in self.model_fields_set:
            _dict['app_id'] = None

        # set to None if moderation (nullable) is None
        # and model_fields_set contains the field
        if self.moderation is None and "moderation" in self.model_fields_set:
            _dict['moderation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Thing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "thumbnail": obj.get("thumbnail"),
            "url": obj.get("url"),
            "public_url": obj.get("public_url"),
            "creator": UserSummarySchema1.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "added": obj.get("added"),
            "modified": obj.get("modified"),
            "is_published": obj.get("is_published"),
            "is_wip": obj.get("is_wip"),
            "is_featured": obj.get("is_featured"),
            "is_nsfw": obj.get("is_nsfw"),
            "is_ai": obj.get("is_ai"),
            "like_count": obj.get("like_count"),
            "is_liked": obj.get("is_liked"),
            "collect_count": obj.get("collect_count"),
            "is_collected": obj.get("is_collected"),
            "comment_count": obj.get("comment_count"),
            "is_watched": obj.get("is_watched"),
            "default_image": ImageSummarySchema.from_dict(obj["default_image"]) if obj.get("default_image") is not None else None,
            "description": obj.get("description"),
            "instructions": obj.get("instructions"),
            "description_html": obj.get("description_html"),
            "instructions_html": obj.get("instructions_html"),
            "details": obj.get("details"),
            "details_parts": obj.get("details_parts"),
            "edu_details": obj.get("edu_details"),
            "edu_details_parts": obj.get("edu_details_parts"),
            "license": obj.get("license"),
            "allows_derivatives": obj.get("allows_derivatives"),
            "files_url": obj.get("files_url"),
            "images_url": obj.get("images_url"),
            "likes_url": obj.get("likes_url"),
            "ancestors_url": obj.get("ancestors_url"),
            "derivatives_url": obj.get("derivatives_url"),
            "tags_url": obj.get("tags_url"),
            "tags": [TagSchema.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "categories_url": obj.get("categories_url"),
            "file_count": obj.get("file_count"),
            "is_purchased": obj.get("is_purchased"),
            "app_id": obj.get("app_id"),
            "download_count": obj.get("download_count"),
            "view_count": obj.get("view_count"),
            "education": ThingEducation.from_dict(obj["education"]) if obj.get("education") is not None else None,
            "remix_count": obj.get("remix_count"),
            "make_count": obj.get("make_count"),
            "app_count": obj.get("app_count"),
            "root_comment_count": obj.get("root_comment_count"),
            "moderation": obj.get("moderation"),
            "is_derivative": obj.get("is_derivative"),
            "ancestors": obj.get("ancestors"),
            "can_comment": obj.get("can_comment"),
            "type_name": obj.get("type_name"),
            "is_banned": obj.get("is_banned"),
            "is_comments_disabled": obj.get("is_comments_disabled"),
            "needs_moderation": obj.get("needs_moderation"),
            "is_decoy": obj.get("is_decoy"),
            "zip_data": ThingZipData.from_dict(obj["zip_data"]) if obj.get("zip_data") is not None else None
        })
        return _obj


