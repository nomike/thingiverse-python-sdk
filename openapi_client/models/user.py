# coding: utf-8

"""
    API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_groups_inner import UserGroupsInner
from openapi_client.models.user_printers_inner import UserPrintersInner
from openapi_client.models.user_programs_inner import UserProgramsInner
from openapi_client.models.user_twitter import UserTwitter
from openapi_client.models.user_types_inner import UserTypesInner
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: StrictStr
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    public_url: Optional[StrictStr] = None
    thumbnail: Optional[StrictStr] = None
    bio: Optional[StrictStr] = None
    bio_html: Optional[StrictStr] = None
    level: Optional[StrictInt] = Field(default=None, description="Is the user an admin or moderator? This will return 10 if user is a normal user")
    location: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    registered: Optional[datetime] = None
    last_active: Optional[datetime] = None
    cover_image: Optional[StrictStr] = None
    things_url: Optional[StrictStr] = None
    copies_url: Optional[StrictStr] = None
    likes_url: Optional[StrictStr] = None
    printers: Optional[List[UserPrintersInner]] = None
    programs: Optional[List[UserProgramsInner]] = None
    types: Optional[List[UserTypesInner]] = None
    skill_level: Optional[StrictStr] = None
    accepts_tips: Optional[StrictBool] = None
    groups: Optional[List[UserGroupsInner]] = None
    website: Optional[StrictStr] = None
    twitter: Optional[UserTwitter] = None
    count_of_followers: Optional[StrictInt] = None
    count_of_following: Optional[StrictInt] = None
    count_of_designs: Optional[StrictInt] = None
    collection_count: Optional[StrictInt] = None
    make_count: Optional[StrictInt] = None
    like_count: Optional[StrictInt] = None
    has_favorite: Optional[StrictBool] = None
    favorite_count: Optional[StrictInt] = None
    is_admin: Optional[StrictBool] = None
    is_moderator: Optional[StrictBool] = None
    is_featured: Optional[StrictBool] = None
    is_verified: Optional[StrictBool] = None
    is_following: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "name", "first_name", "last_name", "email", "url", "public_url", "thumbnail", "bio", "bio_html", "level", "location", "country", "registered", "last_active", "cover_image", "things_url", "copies_url", "likes_url", "printers", "programs", "types", "skill_level", "accepts_tips", "groups", "website", "twitter", "count_of_followers", "count_of_following", "count_of_designs", "collection_count", "make_count", "like_count", "has_favorite", "favorite_count", "is_admin", "is_moderator", "is_featured", "is_verified", "is_following"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in printers (list)
        _items = []
        if self.printers:
            for _item_printers in self.printers:
                if _item_printers:
                    _items.append(_item_printers.to_dict())
            _dict['printers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in programs (list)
        _items = []
        if self.programs:
            for _item_programs in self.programs:
                if _item_programs:
                    _items.append(_item_programs.to_dict())
            _dict['programs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in types (list)
        _items = []
        if self.types:
            for _item_types in self.types:
                if _item_types:
                    _items.append(_item_types.to_dict())
            _dict['types'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of twitter
        if self.twitter:
            _dict['twitter'] = self.twitter.to_dict()
        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if twitter (nullable) is None
        # and model_fields_set contains the field
        if self.twitter is None and "twitter" in self.model_fields_set:
            _dict['twitter'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "url": obj.get("url"),
            "public_url": obj.get("public_url"),
            "thumbnail": obj.get("thumbnail"),
            "bio": obj.get("bio"),
            "bio_html": obj.get("bio_html"),
            "level": obj.get("level"),
            "location": obj.get("location"),
            "country": obj.get("country"),
            "registered": obj.get("registered"),
            "last_active": obj.get("last_active"),
            "cover_image": obj.get("cover_image"),
            "things_url": obj.get("things_url"),
            "copies_url": obj.get("copies_url"),
            "likes_url": obj.get("likes_url"),
            "printers": [UserPrintersInner.from_dict(_item) for _item in obj["printers"]] if obj.get("printers") is not None else None,
            "programs": [UserProgramsInner.from_dict(_item) for _item in obj["programs"]] if obj.get("programs") is not None else None,
            "types": [UserTypesInner.from_dict(_item) for _item in obj["types"]] if obj.get("types") is not None else None,
            "skill_level": obj.get("skill_level"),
            "accepts_tips": obj.get("accepts_tips"),
            "groups": [UserGroupsInner.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "website": obj.get("website"),
            "twitter": UserTwitter.from_dict(obj["twitter"]) if obj.get("twitter") is not None else None,
            "count_of_followers": obj.get("count_of_followers"),
            "count_of_following": obj.get("count_of_following"),
            "count_of_designs": obj.get("count_of_designs"),
            "collection_count": obj.get("collection_count"),
            "make_count": obj.get("make_count"),
            "like_count": obj.get("like_count"),
            "has_favorite": obj.get("has_favorite"),
            "favorite_count": obj.get("favorite_count"),
            "is_admin": obj.get("is_admin"),
            "is_moderator": obj.get("is_moderator"),
            "is_featured": obj.get("is_featured"),
            "is_verified": obj.get("is_verified"),
            "is_following": obj.get("is_following")
        })
        return _obj


