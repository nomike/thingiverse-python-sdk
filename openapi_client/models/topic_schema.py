# coding: utf-8

"""
    API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.comment_modified import CommentModified
from openapi_client.models.topic_schema_comment_of_topic import TopicSchemaCommentOfTopic
from openapi_client.models.topic_schema_comments import TopicSchemaComments
from typing import Optional, Set
from typing_extensions import Self

class TopicSchema(BaseModel):
    """
    TopicSchema
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    group_url: Optional[StrictStr] = None
    pinned: Optional[Annotated[int, Field(le=1, strict=True, ge=0)]] = None
    public_url: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    added: Optional[datetime] = None
    modified: Optional[CommentModified] = None
    tags: Optional[List[StrictStr]] = None
    comments: Optional[TopicSchemaComments] = None
    comment_of_topic: Optional[TopicSchemaCommentOfTopic] = None
    __properties: ClassVar[List[str]] = ["id", "name", "group_url", "pinned", "public_url", "url", "added", "modified", "tags", "comments", "comment_of_topic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TopicSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of modified
        if self.modified:
            _dict['modified'] = self.modified.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comments
        if self.comments:
            _dict['comments'] = self.comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comment_of_topic
        if self.comment_of_topic:
            _dict['comment_of_topic'] = self.comment_of_topic.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TopicSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "group_url": obj.get("group_url"),
            "pinned": obj.get("pinned"),
            "public_url": obj.get("public_url"),
            "url": obj.get("url"),
            "added": obj.get("added"),
            "modified": CommentModified.from_dict(obj["modified"]) if obj.get("modified") is not None else None,
            "tags": obj.get("tags"),
            "comments": TopicSchemaComments.from_dict(obj["comments"]) if obj.get("comments") is not None else None,
            "comment_of_topic": TopicSchemaCommentOfTopic.from_dict(obj["comment_of_topic"]) if obj.get("comment_of_topic") is not None else None
        })
        return _obj


