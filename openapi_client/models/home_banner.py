# coding: utf-8

"""
    API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.thing_schema import ThingSchema
from typing import Optional, Set
from typing_extensions import Self

class HomeBanner(BaseModel):
    """
    HomeBanner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    button_name: Optional[StrictStr] = None
    button_url: Optional[StrictStr] = None
    background_color: Optional[StrictStr] = None
    background_image_url: Optional[StrictStr] = None
    tablet_image_url: Optional[StrictStr] = None
    mobile_image_url: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = None
    thing: Optional[ThingSchema] = None
    __properties: ClassVar[List[str]] = ["id", "title", "body", "type", "button_name", "button_url", "background_color", "background_image_url", "tablet_image_url", "mobile_image_url", "image_url", "thing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HomeBanner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of thing
        if self.thing:
            _dict['thing'] = self.thing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HomeBanner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "body": obj.get("body"),
            "type": obj.get("type"),
            "button_name": obj.get("button_name"),
            "button_url": obj.get("button_url"),
            "background_color": obj.get("background_color"),
            "background_image_url": obj.get("background_image_url"),
            "tablet_image_url": obj.get("tablet_image_url"),
            "mobile_image_url": obj.get("mobile_image_url"),
            "image_url": obj.get("image_url"),
            "thing": ThingSchema.from_dict(obj["thing"]) if obj.get("thing") is not None else None
        })
        return _obj


