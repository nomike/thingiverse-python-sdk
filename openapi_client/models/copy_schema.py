# coding: utf-8

"""
    API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.thing_schema import ThingSchema
from openapi_client.models.user_summary_schema1 import UserSummarySchema1
from typing import Optional, Set
from typing_extensions import Self

class CopySchema(BaseModel):
    """
    CopySchema
    """ # noqa: E501
    id: Optional[StrictInt] = None
    url: Optional[StrictStr] = None
    public_url: Optional[StrictStr] = None
    added: Optional[datetime] = None
    like_count: Optional[StrictInt] = None
    comment_count: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    description_html: Optional[StrictStr] = None
    is_liked: Optional[StrictBool] = None
    creator: Optional[UserSummarySchema1] = None
    thing: Optional[ThingSchema] = None
    thumbnail: Optional[StrictStr] = None
    preview_image: Optional[StrictStr] = None
    images_url: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    needs_moderation: Optional[StrictBool] = None
    type_name: Optional[StrictStr] = None
    view_count: Optional[StrictInt] = None
    category_name: Optional[StrictStr] = None
    category_url: Optional[StrictStr] = None
    details_parts: Optional[List[StrictStr]] = None
    details: Optional[StrictStr] = None
    root_comment_count: Optional[StrictInt] = None
    is_watched: Optional[StrictBool] = None
    is_comments_disabled: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "url", "public_url", "added", "like_count", "comment_count", "description", "description_html", "is_liked", "creator", "thing", "thumbnail", "preview_image", "images_url", "name", "needs_moderation", "type_name", "view_count", "category_name", "category_url", "details_parts", "details", "root_comment_count", "is_watched", "is_comments_disabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopySchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thing
        if self.thing:
            _dict['thing'] = self.thing.to_dict()
        # set to None if creator (nullable) is None
        # and model_fields_set contains the field
        if self.creator is None and "creator" in self.model_fields_set:
            _dict['creator'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopySchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "url": obj.get("url"),
            "public_url": obj.get("public_url"),
            "added": obj.get("added"),
            "like_count": obj.get("like_count"),
            "comment_count": obj.get("comment_count"),
            "description": obj.get("description"),
            "description_html": obj.get("description_html"),
            "is_liked": obj.get("is_liked"),
            "creator": UserSummarySchema1.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "thing": ThingSchema.from_dict(obj["thing"]) if obj.get("thing") is not None else None,
            "thumbnail": obj.get("thumbnail"),
            "preview_image": obj.get("preview_image"),
            "images_url": obj.get("images_url"),
            "name": obj.get("name"),
            "needs_moderation": obj.get("needs_moderation"),
            "type_name": obj.get("type_name"),
            "view_count": obj.get("view_count"),
            "category_name": obj.get("category_name"),
            "category_url": obj.get("category_url"),
            "details_parts": obj.get("details_parts"),
            "details": obj.get("details"),
            "root_comment_count": obj.get("root_comment_count"),
            "is_watched": obj.get("is_watched"),
            "is_comments_disabled": obj.get("is_comments_disabled")
        })
        return _obj


