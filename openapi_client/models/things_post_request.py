# coding: utf-8

"""
    API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ThingsPostRequest(BaseModel):
    """
    ThingsPostRequest
    """ # noqa: E501
    name: StrictStr = Field(description="Set the name of the thing")
    license: StrictStr = Field(description="One of cc, cc-sa, cc-nd, cc-nc-sa, cc-nc-nd, pd0, gpl, lgpl, bsd. Set license.")
    category: StrictStr = Field(description="Set the category of the thing. Uses full category name (eg. \"3D Printer Parts\")")
    description: Optional[StrictStr] = Field(default=None, description="Set the description.")
    instructions: Optional[StrictStr] = Field(default=None, description="Set the instructions.")
    is_wip: Optional[StrictBool] = Field(default=None, description="Toggle whether this thing is a work in progress. Default is false.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="An array of strings containing tag names. Sets all current tags.")
    ancestors: Optional[List[StrictInt]] = Field(default=None, description="An array of thing ids that this thing is derived from.")
    is_remix: Optional[StrictBool] = Field(default=None, description="Is this thing remixed from another thing")
    __properties: ClassVar[List[str]] = ["name", "license", "category", "description", "instructions", "is_wip", "tags", "ancestors", "is_remix"]

    @field_validator('license')
    def license_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['cc', 'cc-sa', 'cc-nd', 'cc-nc-sa', 'cc-nc-nd', 'pd0', 'gpl', 'lgpl', 'bsd']):
            raise ValueError("must be one of enum values ('cc', 'cc-sa', 'cc-nd', 'cc-nc-sa', 'cc-nc-nd', 'pd0', 'gpl', 'lgpl', 'bsd')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThingsPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThingsPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "license": obj.get("license"),
            "category": obj.get("category"),
            "description": obj.get("description"),
            "instructions": obj.get("instructions"),
            "is_wip": obj.get("is_wip"),
            "tags": obj.get("tags"),
            "ancestors": obj.get("ancestors"),
            "is_remix": obj.get("is_remix")
        })
        return _obj


