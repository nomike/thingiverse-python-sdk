# coding: utf-8

"""
    API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.copies_copy_id_threaded_comments_get200_response_comments_value_modified_date import CopiesCopyIdThreadedCommentsGet200ResponseCommentsValueModifiedDate
from typing import Optional, Set
from typing_extensions import Self

class CopiesCopyIdThreadedCommentsGet200ResponseCommentsValue(BaseModel):
    """
    CopiesCopyIdThreadedCommentsGet200ResponseCommentsValue
    """ # noqa: E501
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    add_date: Optional[datetime] = None
    modified_date: Optional[CopiesCopyIdThreadedCommentsGet200ResponseCommentsValueModifiedDate] = None
    body: Optional[StrictStr] = None
    user_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    is_deleted: Optional[StrictBool] = None
    url: Optional[StrictStr] = None
    needs_moderation: Optional[StrictInt] = None
    assets: Optional[List[StrictStr]] = None
    parent_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    parent_user_name: Optional[StrictStr] = None
    parent_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "add_date", "modified_date", "body", "user_id", "is_deleted", "url", "needs_moderation", "assets", "parent_id", "parent_user_name", "parent_url"]

    @field_validator('needs_moderation')
    def needs_moderation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopiesCopyIdThreadedCommentsGet200ResponseCommentsValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of modified_date
        if self.modified_date:
            _dict['modified_date'] = self.modified_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopiesCopyIdThreadedCommentsGet200ResponseCommentsValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "add_date": obj.get("add_date"),
            "modified_date": CopiesCopyIdThreadedCommentsGet200ResponseCommentsValueModifiedDate.from_dict(obj["modified_date"]) if obj.get("modified_date") is not None else None,
            "body": obj.get("body"),
            "user_id": obj.get("user_id"),
            "is_deleted": obj.get("is_deleted"),
            "url": obj.get("url"),
            "needs_moderation": obj.get("needs_moderation"),
            "assets": obj.get("assets"),
            "parent_id": obj.get("parent_id"),
            "parent_user_name": obj.get("parent_user_name"),
            "parent_url": obj.get("parent_url")
        })
        return _obj


