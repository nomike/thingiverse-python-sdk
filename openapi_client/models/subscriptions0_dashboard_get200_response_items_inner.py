# coding: utf-8

"""
    API documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.subscriptions0_dashboard_get200_response_items_inner_content import Subscriptions0DashboardGet200ResponseItemsInnerContent
from openapi_client.models.subscriptions0_dashboard_get200_response_items_inner_image import Subscriptions0DashboardGet200ResponseItemsInnerImage
from openapi_client.models.user_schema import UserSchema
from typing import Optional, Set
from typing_extensions import Self

class Subscriptions0DashboardGet200ResponseItemsInner(BaseModel):
    """
    Subscriptions0DashboardGet200ResponseItemsInner
    """ # noqa: E501
    message: Optional[StrictStr] = None
    image: Optional[Subscriptions0DashboardGet200ResponseItemsInnerImage] = None
    type: Optional[StrictStr] = None
    is_subscribed: Optional[StrictBool] = None
    user: Optional[UserSchema] = None
    is_personal: Optional[StrictBool] = None
    time: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    content: Optional[Subscriptions0DashboardGet200ResponseItemsInnerContent] = None
    __properties: ClassVar[List[str]] = ["message", "image", "type", "is_subscribed", "user", "is_personal", "time", "id", "content"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscriptions0DashboardGet200ResponseItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscriptions0DashboardGet200ResponseItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "image": Subscriptions0DashboardGet200ResponseItemsInnerImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "type": obj.get("type"),
            "is_subscribed": obj.get("is_subscribed"),
            "user": UserSchema.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "is_personal": obj.get("is_personal"),
            "time": obj.get("time"),
            "id": obj.get("id"),
            "content": Subscriptions0DashboardGet200ResponseItemsInnerContent.from_dict(obj["content"]) if obj.get("content") is not None else None
        })
        return _obj


